stages:
  - lint
  - build
  - push
  - deploy
  - review

.node:
  image: node:14.17.0-alpine
  cache:
    key:
      files: ['packge.json']
    paths: ['.npm']
  before_script:
    - echo "Install dependencies"
    # install all dependencies in .npm directory and use version from cache
    - npm ci --cache .npm --prefer-offline

.docker:
  image: docker:20
  services:
    - docker:dind #to prevent error docker daemon not found inside docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

eslint:
  extends: .node
  stage: lint
  script:
    - echo "Lint source code with ESLint"
    - npm run lint
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

prettier:
  extends: .node
  stage: lint
  script:
    - echo "Format source code with Prettier"
    - npm run format
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build:
  extends: .docker
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE:latest
      --build-arg REACT_APP_HOSTNAME="http://$CI_COMMIT_REF_SLUG.$REACT_APP_HOSTNAME"
      --build-arg REACT_APP_PROTOCOL="http"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

push_latest:
  extends: .docker
  stage: push
  variables:
    GIT_STRATEGY: none #prevent cloning source code
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

deploy:
  stage: deploy
  tags: ['remote-react'] #tag of runner will be used
  variables:
    GIT_STRATEGY: none
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - mkdir -p ~/deploy/$CI_COMMIT_SHA
    - cp ~/docker-compose.yml ~/deploy/$CI_COMMIT_REF_SLUG/
    - docker stack deploy $CI_COMMIT_REF_SLUG -c /home/gitlab-runner/deploy/CI_COMMIT_REF_SLUG/docker-compose.yml --with-registry-auth
  environment:
    name: production
    url: http://$CI_COMMIT_REF_SLUG.$REACT_APP_HOSTNAME
  needs: ['build']
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

create_review_app:
  tags: ['remote-react']
  stage: review
  variables:
    GIT_STRATEGY: none
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - mkdir -p ~/deploy/$CI_COMMIT_SHA
    - cp ~/docker-compose.yml ~/deploy/$CI_COMMIT_REF_SLUG/
    - docker stack deploy $CI_COMMIT_REF_SLUG -c /home/gitlab-runner/deploy/CI_COMMIT_REF_SLUG/docker-compose.yml --with-registry-auth
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_COMMIT_REF_SLUG.$APP_HOST/
    on_stop: stop_review
  rules:
    - if: '$CI_MERGE_REQUEST_TITLE =~ /SKIP REVIEW/'
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

stop_review:
  tags: ['remote-react']
  stage: review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  variables:
    GIT_STRATEGY: none
  script:
    - docker stack rm $CI_COMMIT_REF_SLUG
    - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - rm -rf ~/deploy/$CI_COMMIT_SHA
  rules:
    - if: '$CI_MERGE_REQUEST_TITLE =~ /SKIP REVIEW/'
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual

reset_db:
  stage: review
  variables:
    DEPLOY_DIST: '/home/deploy/app/$CI_COMMIT_REF_SLUG'
    DB_NAME: $CI_COMMIT_REF_SLUG
  script:
    - |
      ssh $SSH_USER@$SSH_ADDRESS <<EOF
          ./$DEPLOY_DIST/current/bin/create-db-copy "$DB_PASSWORD" "$DB_NAME"
      EOF
  rules:
    - if: '$CI_MERGE_REQUEST_TITLE =~ /SKIP REVIEW/'
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
