stages:
    - build
    - deploy-stage

variables:
    VARIABLE_DATA: Gitlab-CI-YAML

build:
    stage: build
    image: docker:git
    services:
        - docker:dind
    script:
        # get node app version from package.json for use in tagging docker image
        - apk update && apk add jq
        - export VERSION=`jq -r ".version" < ./package.json`
        # login to docker
        - env
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        # build and tag docker image
        - docker build -t $CI_REGISTRY_IMAGE:$VERSION -t $CI_REGISTRY_IMAGE:latest -f Dockerfile.dev .
        # publish finished image
        - docker push $CI_REGISTRY_IMAGE:$VERSION
        - docker push $CI_REGISTRY_IMAGE:latest

deploy-stage:
    stage: deploy-stage
    image: alpine:latest
    script:
        - chmod og= $ID_RSA
        - apk update && apk add openssh-client
        # stop existing docker container & remove images
        - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop $CI_PROJECT_NAME || true"
        - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker rm $CI_PROJECT_NAME || true"
        - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker image rm $CI_REGISTRY_IMAGE:latest || true"
        # pull new container
        - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
        - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $CI_REGISTRY_IMAGE:latest"
        # run new container
        - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d --restart unless-stopped --name $CI_PROJECT_NAME -p 9000:9000 -e "variableData=Docker-Run-Command" $CI_REGISTRY_IMAGE:latest"
